type UserProfile {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    company: String!
    currentPosition: String
    linkedInUrl: String!
    profilePictureUrl: String!
    profilePitch: String!
    hasBoardEducation: Boolean!
    hasLeadershipEducation: Boolean!
    leadershipEducationDescription: String
    boardExperienceYears: Int
    executiveExperienceYears: Int
    leadershipExperienceYears: Int
    agreedToTerms: Boolean!
    boardRoles: [String!]
    companyTypes: [String!]
    keyCompetencies: [String!]
    tags: [Tag!]!
}

type Tag {
    id: ID!
    name: String!
}

input RegisterUserProfileInput {
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    company: String!
    currentPosition: String
    linkedInUrl: String!
    profilePitch: String!
    hasBoardEducation: Boolean!
    hasLeadershipEducation: Boolean!
    leadershipEducationDescription: String
    boardRoles: [String!]
    companyTypes: [String!]
    keyCompetencyIds: [ID!]
    boardExperienceYears: Int
    executiveExperienceYears: Int
    leadershipExperienceYears: Int
    agreedToTerms: Boolean!
    tagIds: [ID!]     # <--- let frontend send tag IDs to associate with user
}

type Query {
    findAllUsers: [UserProfile]
    findUsersByTag(tag: String!): [UserProfile]
    findUserById(id: ID!): UserProfile
    findUserByName(name: String!): UserProfile
}

type Mutation {
    createUser(input: RegisterUserProfileInput!): UserProfile
    updateUser(id: ID!, input: RegisterUserProfileInput!): UserProfile
    deleteUser(id: ID!): Boolean
}
